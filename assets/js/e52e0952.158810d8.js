"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[69],{4430:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>h});var s=t(5893),o=t(1151);const i={title:"Dull Schema"},a=void 0,c={id:"how-to/schema/dull-schema",title:"Dull Schema",description:"This package lives in",source:"@site/docs/how-to/schema/dull-schema.md",sourceDirName:"how-to/schema",slug:"/how-to/schema/dull-schema",permalink:"/pico/docs/how-to/schema/dull-schema",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Dull Schema"},sidebar:"docs",previous:{title:"Basic Schema",permalink:"/pico/docs/how-to/schema/basic-schema"},next:{title:"Concepts",permalink:"/pico/docs/category/concepts"}},r={},h=[{value:"Schemas",id:"schemas",level:2},{value:"Show me",id:"show-me",level:2},{value:"Boring part",id:"boring-part",level:2}];function l(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.admonition,{title:"Installation",type:"tip",children:[(0,s.jsx)(n.p,{children:"This package lives in"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @use-pico/dull-stuff @use-pico/query @use-pico/schema\n"})})]}),"\n",(0,s.jsx)(n.p,{children:"Strange name, right? But it's not that strange, if you know the backstory."}),"\n",(0,s.jsx)(n.h2,{id:"schemas",children:"Schemas"}),"\n",(0,s.jsxs)(n.p,{children:["When you need to specify basic building blocks of your application (talking about CRUD),\nyou'll need bunch of ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"boring schemas"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["That's the ",(0,s.jsx)(n.strong,{children:"reason why"})," this package exists. To ",(0,s.jsx)(n.em,{children:"minimize the amount of code you need to write."})]}),"\n",(0,s.jsx)(n.h2,{id:"show-me",children:"Show me"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="./src/schema/BuildingDullSchema.ts"',children:'/**\n * You know, you need this. Really\n */\nimport {withDullSchema} from "@use-pico/dull-stuff";\n/**\n * Dull schema requires exact shape, so those methods helps\n * to create it.\n */\nimport {\n    filterOf,\n    orderByOf\n}                       from "@use-pico/query";\n/**\n * The same: you need thos to keep the final shape of dull schema\n * as it\'s needed.\n */\nimport {\n    identityOf,\n    schema\n}                       from "@use-pico/schema";\n\n/**\n * This is an example from the referenced project DeRivean:\n * Creater dull schema, types are exact, so they\'ll help you with guidance.\n */\nexport const BuildingSchema = withDullSchema({\n    /**\n     * Entity. This is the basic shape returned from the database.\n     */\n    entity: identityOf(z => z.object({\n        name:         z.string,\n        construction: z.number,\n        maximum:      z.number,\n    })),\n    /**\n     * Shape is schema used to create entity (also used in forms).\n     */\n    shape: schema(z => z.object({\n        name:         z.string,\n        construction: z.number,\n        maximum:      z.number,\n    })),\n    /**\n     * Shape of filter/where query available to client/server.\n     *\n     * This is important, because you define, what\'s supported instead of\n     * direct exposure of database structure.\n     */\n    filter: filterOf(z => z.object({\n        name: z.string$,\n    })),\n    /**\n     * Similar to "filter": define which orderings are supported.\n     */\n    orderBy: orderByOf(["name"]),\n});\n/**\n * As the common concept: export type with the same type as the schema.\n */\nexport type BuildingSchema = typeof BuildingSchema;\n'})}),"\n",(0,s.jsx)(n.h2,{id:"boring-part",children:"Boring part"}),"\n",(0,s.jsxs)(n.p,{children:["So, what's happening? You'll get ",(0,s.jsx)(n.code,{children:"QuerySchema"}),", ",(0,s.jsx)(n.code,{children:"MutationSchema"})," and a few other interesting thing ",(0,s.jsx)(n.code,{children:"@pico"})," needs\nto work. A lot of internal schemas needs same input schema (for example ",(0,s.jsx)(n.code,{children:"MutationSchema"})," needs ",(0,s.jsx)(n.code,{children:"QuerySchema"}),", ",(0,s.jsx)(n.code,{children:"QuerySchema"})," needs\n",(0,s.jsx)(n.code,{children:"FilterSchema"})," and so on)."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Now you have everything you need in one piece."})})]})}function d(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>a});var s=t(7294);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './@routes/__root'
import { Route as LocaleRouteImport } from './@routes/$locale'
import { Route as IndexRouteImport } from './@routes/index'
import { Route as LocaleIndexRouteImport } from './@routes/$locale/index'
import { Route as LocaleComponentsRouteImport } from './@routes/$locale/components'
import { Route as LocaleComponentsIndexRouteImport } from './@routes/$locale/components/index'
import { Route as LocaleComponentsTableRouteImport } from './@routes/$locale/components/table'
import { Route as LocaleComponentsPopupSelectRouteImport } from './@routes/$locale/components/popup-select'
import { Route as LocaleComponentsColorsRouteImport } from './@routes/$locale/components/colors'
import { Route as LocaleComponentsButtonRouteImport } from './@routes/$locale/components/button'
import { Route as LocaleComponentsBadgeRouteImport } from './@routes/$locale/components/badge'
import { Route as LocaleComponentsActionRouteImport } from './@routes/$locale/components/action'

const LocaleRoute = LocaleRouteImport.update({
  id: '/$locale',
  path: '/$locale',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LocaleIndexRoute = LocaleIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleComponentsRoute = LocaleComponentsRouteImport.update({
  id: '/components',
  path: '/components',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleComponentsIndexRoute = LocaleComponentsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LocaleComponentsRoute,
} as any)
const LocaleComponentsTableRoute = LocaleComponentsTableRouteImport.update({
  id: '/table',
  path: '/table',
  getParentRoute: () => LocaleComponentsRoute,
} as any)
const LocaleComponentsPopupSelectRoute =
  LocaleComponentsPopupSelectRouteImport.update({
    id: '/popup-select',
    path: '/popup-select',
    getParentRoute: () => LocaleComponentsRoute,
  } as any)
const LocaleComponentsColorsRoute = LocaleComponentsColorsRouteImport.update({
  id: '/colors',
  path: '/colors',
  getParentRoute: () => LocaleComponentsRoute,
} as any)
const LocaleComponentsButtonRoute = LocaleComponentsButtonRouteImport.update({
  id: '/button',
  path: '/button',
  getParentRoute: () => LocaleComponentsRoute,
} as any)
const LocaleComponentsBadgeRoute = LocaleComponentsBadgeRouteImport.update({
  id: '/badge',
  path: '/badge',
  getParentRoute: () => LocaleComponentsRoute,
} as any)
const LocaleComponentsActionRoute = LocaleComponentsActionRouteImport.update({
  id: '/action',
  path: '/action',
  getParentRoute: () => LocaleComponentsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/$locale/components': typeof LocaleComponentsRouteWithChildren
  '/$locale/': typeof LocaleIndexRoute
  '/$locale/components/action': typeof LocaleComponentsActionRoute
  '/$locale/components/badge': typeof LocaleComponentsBadgeRoute
  '/$locale/components/button': typeof LocaleComponentsButtonRoute
  '/$locale/components/colors': typeof LocaleComponentsColorsRoute
  '/$locale/components/popup-select': typeof LocaleComponentsPopupSelectRoute
  '/$locale/components/table': typeof LocaleComponentsTableRoute
  '/$locale/components/': typeof LocaleComponentsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleIndexRoute
  '/$locale/components/action': typeof LocaleComponentsActionRoute
  '/$locale/components/badge': typeof LocaleComponentsBadgeRoute
  '/$locale/components/button': typeof LocaleComponentsButtonRoute
  '/$locale/components/colors': typeof LocaleComponentsColorsRoute
  '/$locale/components/popup-select': typeof LocaleComponentsPopupSelectRoute
  '/$locale/components/table': typeof LocaleComponentsTableRoute
  '/$locale/components': typeof LocaleComponentsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/$locale/components': typeof LocaleComponentsRouteWithChildren
  '/$locale/': typeof LocaleIndexRoute
  '/$locale/components/action': typeof LocaleComponentsActionRoute
  '/$locale/components/badge': typeof LocaleComponentsBadgeRoute
  '/$locale/components/button': typeof LocaleComponentsButtonRoute
  '/$locale/components/colors': typeof LocaleComponentsColorsRoute
  '/$locale/components/popup-select': typeof LocaleComponentsPopupSelectRoute
  '/$locale/components/table': typeof LocaleComponentsTableRoute
  '/$locale/components/': typeof LocaleComponentsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$locale'
    | '/$locale/components'
    | '/$locale/'
    | '/$locale/components/action'
    | '/$locale/components/badge'
    | '/$locale/components/button'
    | '/$locale/components/colors'
    | '/$locale/components/popup-select'
    | '/$locale/components/table'
    | '/$locale/components/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$locale'
    | '/$locale/components/action'
    | '/$locale/components/badge'
    | '/$locale/components/button'
    | '/$locale/components/colors'
    | '/$locale/components/popup-select'
    | '/$locale/components/table'
    | '/$locale/components'
  id:
    | '__root__'
    | '/'
    | '/$locale'
    | '/$locale/components'
    | '/$locale/'
    | '/$locale/components/action'
    | '/$locale/components/badge'
    | '/$locale/components/button'
    | '/$locale/components/colors'
    | '/$locale/components/popup-select'
    | '/$locale/components/table'
    | '/$locale/components/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LocaleRoute: typeof LocaleRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$locale': {
      id: '/$locale'
      path: '/$locale'
      fullPath: '/$locale'
      preLoaderRoute: typeof LocaleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$locale/': {
      id: '/$locale/'
      path: '/'
      fullPath: '/$locale/'
      preLoaderRoute: typeof LocaleIndexRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/components': {
      id: '/$locale/components'
      path: '/components'
      fullPath: '/$locale/components'
      preLoaderRoute: typeof LocaleComponentsRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/components/': {
      id: '/$locale/components/'
      path: '/'
      fullPath: '/$locale/components/'
      preLoaderRoute: typeof LocaleComponentsIndexRouteImport
      parentRoute: typeof LocaleComponentsRoute
    }
    '/$locale/components/table': {
      id: '/$locale/components/table'
      path: '/table'
      fullPath: '/$locale/components/table'
      preLoaderRoute: typeof LocaleComponentsTableRouteImport
      parentRoute: typeof LocaleComponentsRoute
    }
    '/$locale/components/popup-select': {
      id: '/$locale/components/popup-select'
      path: '/popup-select'
      fullPath: '/$locale/components/popup-select'
      preLoaderRoute: typeof LocaleComponentsPopupSelectRouteImport
      parentRoute: typeof LocaleComponentsRoute
    }
    '/$locale/components/colors': {
      id: '/$locale/components/colors'
      path: '/colors'
      fullPath: '/$locale/components/colors'
      preLoaderRoute: typeof LocaleComponentsColorsRouteImport
      parentRoute: typeof LocaleComponentsRoute
    }
    '/$locale/components/button': {
      id: '/$locale/components/button'
      path: '/button'
      fullPath: '/$locale/components/button'
      preLoaderRoute: typeof LocaleComponentsButtonRouteImport
      parentRoute: typeof LocaleComponentsRoute
    }
    '/$locale/components/badge': {
      id: '/$locale/components/badge'
      path: '/badge'
      fullPath: '/$locale/components/badge'
      preLoaderRoute: typeof LocaleComponentsBadgeRouteImport
      parentRoute: typeof LocaleComponentsRoute
    }
    '/$locale/components/action': {
      id: '/$locale/components/action'
      path: '/action'
      fullPath: '/$locale/components/action'
      preLoaderRoute: typeof LocaleComponentsActionRouteImport
      parentRoute: typeof LocaleComponentsRoute
    }
  }
}

interface LocaleComponentsRouteChildren {
  LocaleComponentsActionRoute: typeof LocaleComponentsActionRoute
  LocaleComponentsBadgeRoute: typeof LocaleComponentsBadgeRoute
  LocaleComponentsButtonRoute: typeof LocaleComponentsButtonRoute
  LocaleComponentsColorsRoute: typeof LocaleComponentsColorsRoute
  LocaleComponentsPopupSelectRoute: typeof LocaleComponentsPopupSelectRoute
  LocaleComponentsTableRoute: typeof LocaleComponentsTableRoute
  LocaleComponentsIndexRoute: typeof LocaleComponentsIndexRoute
}

const LocaleComponentsRouteChildren: LocaleComponentsRouteChildren = {
  LocaleComponentsActionRoute: LocaleComponentsActionRoute,
  LocaleComponentsBadgeRoute: LocaleComponentsBadgeRoute,
  LocaleComponentsButtonRoute: LocaleComponentsButtonRoute,
  LocaleComponentsColorsRoute: LocaleComponentsColorsRoute,
  LocaleComponentsPopupSelectRoute: LocaleComponentsPopupSelectRoute,
  LocaleComponentsTableRoute: LocaleComponentsTableRoute,
  LocaleComponentsIndexRoute: LocaleComponentsIndexRoute,
}

const LocaleComponentsRouteWithChildren =
  LocaleComponentsRoute._addFileChildren(LocaleComponentsRouteChildren)

interface LocaleRouteChildren {
  LocaleComponentsRoute: typeof LocaleComponentsRouteWithChildren
  LocaleIndexRoute: typeof LocaleIndexRoute
}

const LocaleRouteChildren: LocaleRouteChildren = {
  LocaleComponentsRoute: LocaleComponentsRouteWithChildren,
  LocaleIndexRoute: LocaleIndexRoute,
}

const LocaleRouteWithChildren =
  LocaleRoute._addFileChildren(LocaleRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LocaleRoute: LocaleRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
